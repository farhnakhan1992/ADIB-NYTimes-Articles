import UIKit


extension Int {
    var romanNumeral: String {
        var integerValue = self
        var numeralString = ""
        let mappingList: [(Int, String)] = [(1000, "M"), (900, "CM"), (500, "D"), (400, "CD"), (100, "C"), (90, "XC"), (50, "L"), (40, "XL"), (10, "X"), (9, "IX"), (5, "V"), (4, "IV"), (1, "I")]
        for i in mappingList {
            while (integerValue >= i.0) {
                integerValue -= i.0
                numeralString += i.1
            }
        }
        return numeralString
    }
}

class RomanNumber {

    let MAX_VALUE = 3000
    let minValue = 0
    var number: Int

    init(value: Int) {
        self.number = value < MAX_VALUE ? value : MAX_VALUE
    }
    
    func convert() -> String {
        return number.romanNumeral
    }
}

var number = RomanNumber(value: 3350)
print(number.convert())



